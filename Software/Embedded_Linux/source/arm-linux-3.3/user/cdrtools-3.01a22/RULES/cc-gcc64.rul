#ident "@(#)cc-gcc64.rul	1.17 13/11/13 "
###########################################################################
# Written 1996-2013 by J. Schilling
###########################################################################
#
# Platform independent MACROS for GCC
#
###########################################################################
# Copyright (c) J. Schilling
###########################################################################
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# See the file CDDL.Schily.txt in this distribution for details.
# A copy of the CDDL is also available via the Internet at
# http://www.opensource.org/licenses/cddl1.txt
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file CDDL.Schily.txt from this distribution.
###########################################################################

GCC_OPT64=	-m64

CPPFLAGS=	-DSCHILY_BUILD $(CPPOPTS) $(CPPOPTX) $(OSINCDIRS:%=-I%) $(OSDEFS) $(OSDEFSX)
CFLAGS=		$(COPTS) $(CWARNOPTS) $(COPTOPT) $(GCCOPTOPT) $(COPTX)
C++FLAGS=	$(C++OPTS) $(C++WARNOPTS) $(C++OPTOPT) $(G++OPTOPT) $(C++OPTX)

CPPOPTS=	-I$(ARCHDIR) -I$(OINCSDIR) $(INCDIRS:%=-I%) $(INCDIRSX:%=-I%)
COPTS=		$(GCC_OPT64)
#		-Wtraditional now causes more pain than it helps 
CWOPTS=		-Wall -Wtraditional
CWOPTS=		-Wall -Wno-unknown-pragmas \
		-Wshadow -Wmissing-prototypes -Wstrict-prototypes
COPTOPT=	-O
COPTDYN=	-fpic
COPTGPROF=	-pg
C++OPTS=	$(GCC_OPT64)
C++WOPTS=	$(CWOPTS)
C++OPTOPT=	$(COPTOPT)
C++OPTDYN=	-fpic
C++OPTGPROF=	-pg

LIB_PREFIX=	lib
LIB_SUFFIX=	.a
SHL_SUFFIX=	.so.1

LIBS_PATH=	-L$(OLIBSDIR)
LIBS_PATH_STATIC= -L$(OLIBSDIR_STATIC) 

LDFLAGS=	$(LDOPTS) $(LDOPTX)
LDLIBS=		$(LIBS) $(LIBX)

LDOPTS=		$(LIBS_PATH) $(LDPATH) $(RUNPATH:-R%=-Wl,-R%)
LDOPTDYN=	-shared -Wl,-soname,$(TARGET)
LNDYNLIB=	@$(RM) $(RM_FORCE) $(PTARGET_BASE).so; $(SYMLINK) $(TARGET) $(PTARGET_BASE).so

FLOAT_OPTIONS=	

__CC_COM=	$(_UNIQ)$(CC)
___CC_COM=	$(__CC_COM:$(_UNIQ)=$(CC_COM_DEF))
CC_COM=		$(___CC_COM:$(_UNIQ)%=%)

__CC++_COM=	$(_UNIQ)$(CCC)
___CC++_COM=	$(__CC++_COM:$(_UNIQ)=$(CC++_COM_DEF))
CC++_COM=	$(___CC++_COM:$(_UNIQ)%=%)

CC_COM_DEF=	gcc
CC++_COM_DEF=	g++
CC=		$(CC_COM_DEF)
CCC=		$(CC++_COM_DEF)

CCCC=		@echo "	==> COMPILING \"$@\""; $(CC_COM) $(GCC_OPT64)
CC++ =		@echo "	==> COMPILING \"$@\""; $(CC++_COM) $(GCC_OPT64)
LDCC=		@echo "	==> LINKING \"$@\""; $(CC_COM) $(GCC_OPT64)
LDCC++ =	@echo "	==> LINKING \"$@\""; $(CC++_COM) $(GCC_OPT64)
DYNLD=		@echo "	==> LINKING dynamic library \"$@\""; $(CC_COM) $(GCC_OPT64)
DYNLDC++ =	@echo "	==> LINKING dynamic library \"$@\""; $(CC++_COM) $(GCC_OPT64)

RMDEP=		:
MKDEP=		@echo "	==> MAKING DEPENDENCIES \"$@\""; $(RMDEP); $(CC_COM) $(GCC_OPT64) -M
MKDEP_OUT=
MKC++DEP=	@echo "	==> MAKING DEPENDENCIES \"$@\""; $(RMDEP); $(CC++_COM) $(GCC_OPT64) -M
MKC++DEP_OUT=
